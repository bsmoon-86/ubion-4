a <- c(1,2,3,4,5,6,7,8,9)
a
b <- array(1:20, dim=c(4,5))
b
c <- matrix(1:10, nrow=2)
c
_list <- list(name = "test", age = 20,
phone="01012345678")
_list <- list(name = "test", age = 20, phone="01012345678")
l <- list(name = "test", age = 20, phone="01012345678")
l
l["name"]
df <- data.frame(name = c("test1", "test2"),
age = c(20, 30),
phone = c("01012345678",
"01098765432"))
df
View(l)
View(df)
View(c)
View(b)
a <- matrix(1:10, nrow=2)
b <- matrix(1:10, nrow=5)
a %*% b
c <- 1:3
d <- 2:4
a %in% b
c %in% d
"%s%" <- function(x, y){
return (x+y)^2
}
1 %s% 5
return result
return (x^2+y^2)
"%s%" <- function(x, y){
return x^2+y^2
}
return x+y
"%s%" <- function(x, y){
return (x+y)
}
1 %s% 5
"%s%" <- function(x, y){
return (x^2+y^2)
}
1 %s% 5
"%s%" <- function(x, y){
return ((x+y)^2)
}
1 %s% 5
a <- 10
if (a > 20){
print("a는 20보다 크다")
}else{
print("a는 20보다 작거나 같다. ")
}
name <- c("test", "test2", "test3")
which(name == "test2")
which(name != "test")
which(name == "test5")
a <- 1:10
for(i in a){
print(i)
}
for(i in a){
if(i > 5){
break
}
print(i)
}
for(i in a){
print(i)
if(i > 5){
break
}
}
for(i in a){
if(i < 5){
next
}
print(i)
}
for(i in a){
print(i)
if(i < 5){
next
}
}
func_1 <- function(){
print("Hello R")
}
func_1()
func_1 <- function(){
print("Hello R")
}
print("Hello R")
func_1 <- function(){
print("Hello R")
for(i in a){
if(i < 5){
next
}
print(i)
}
for(i in a){
if(i < 5){
next
}
print(i)
}
func_2 <- function(x,y){
return (x+y)
}
func_2(10, 20)
func_3 <- function(x, y=5){
return (x - y)
}
func_3(10, 2)
func_3(10)
func_4(x, ...){
print(x)
summary(...)
}
v <- 1:10
func_4<- function(x, ...){
print(x)
summary(...)
}
v <- 1:10
v
func_4("test", v)
v2 <- 1:5
func_4("test2", v2)
name <- c("A", "B", "C", "D", "E")
grade <- c(1, 3, 2, 1)
student <- data.frame(name, grade)
grade <- c(1, 3, 2, 1, 2)
student <- data.frame(name, grade)
student
midturm <- c(70, 80, 60, 70, 90)
final <- c(80, 80, 70, 60, 60)
scores <- cbind(midturm, final)
scores
gender <- c("M", "F", "F", "F", "M")
students <- data.frame(student, gender, scores)
students
## cbind() 함수는 컬럼을 추가하는 함수.
## total_score는 백터 2개의 합. 컬럼x
total_score <- midturm + final
total_score
cbind(students, total_score)
students
## rbind() 함수. 행을 추가하는 함수.
new_student <- data.frame(name = "F", grade = 2,
midturm = 90, final=80)
new_student
## students에 new_student을 결합(행 추가)
rbind(students, new_student)
## rbind() 함수. 행을 추가하는 함수.
new_student <- data.frame(name = "F", grade = 2,
gender = "M",
midturm = 90, final=80)
new_student
## students에 new_student을 결합(행 추가)
rbind(students, new_student)
## 컬럼의 기준으로 출력 방법
students$name
students[["grade"]]
students[[4]]
students[,"gender"]
## 인덱스를 기준으로 출력 방법
students[1,]
students[2:5,]
student[-2,]
## 데이터 프레임 필터링
students$midturm >= 80
students[students$midturm >= 80, ]
## 오름차순, 내림차순 정렬 방법 order() 함수를 사용
order(students$grade)
students[oder(students$grade)]
students[order(students$grade)]
students[order(students$grade),]
## 내림차순 정렬
order(students$final, decreasing = TRUE)
## 내림차순 정렬
order(students$midturm, decreasing = TRUE)
order(-students$midturm)
students[order(students$midturm, decreasing = TRUE)]
students[order(students$midturm, decreasing = TRUE), ]
## 결측치인 NA 연산 관련
x <- c(7, 9, NA, 5, 2)
x[x>6]
x[x<6]
x[x==7]
subset(x, x>6)
subset(x, x<6)
# create a list of all installed packages 
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed 
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\ 
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed 
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove 
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
read.csv("csv_exam.csv")
exam <- read.csv("csv_exam.csv")
## 데이터프레임의 내장함수들 사용
head(exam)
head(exam, 3)
##tail()은 데이터프레임에서 하단에 6개를 출력
## head()함수와 사용 방법이 같습니다.
tail(exam)
tail(exam, 2)
View(exam)
view(exam)
## 데이터프레임의 사이즈를 출력 하는 함수 dim()
dim(exam)
## 데이터프레임의 속성 값 확인하는 함수 str()
str(exam)
## table()은 컬럼의 데이터들의 개수를 출력
table(exam$class)
## 통계 요약 정보를 출력하는 함수 summary()
summary(exam)
summary(exam$math)
## 패키지 설치 dplyr
install.packages("dplyr")
## 패키지는 로드(python에서의 import와 같은 기능)
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
install.packages("ggplot2")
df_raw <- data.frame(var1 = c(1,2,1),
var2 = c(2,3,5))
df_raw
#rename() 함수를 이용하여 컬럼의 이름을 변경
rename(df_raw, v2 = var2)
#파생변수를 생성.
df_raw$sum <- df_raw$var1 + df_raw.var2
#파생변수를 생성.
df_raw$sum <- df_raw$var1 + df_raw$var2
df_raw
# 조건문을 이용해서 파생변수 생성
# ifelse(조건식, 참인경우 부여가 될 값, 거짓인경우 부여될 값)
df_raw$total <- ifelse(df_raw$sum > 5, "pass", "fail")
df_raw
# 조건식이 다중인 경우
df_raw$total <- ifelse(df_raw$sum > 5, "pass",
ifelse(df_raw$sum == 5, "hold", "fail"))
df_raw
exam
# 파이프 연산자 단축키는 Shift + Ctrl + M
# filter() 함수는 필터링 기능을 가진 함수
exam %>% filter(class == 1)
# arrange()함수는 특정 컬럼의 값을 기준으로 정렬하는 함수
exam %>% arrange(math)
# 내림차순 정렬을 하려면 desc()함수를 사용
exam %>% arrange(desc(english))
# 정렬의 기준을 다중으로 사용하려면 ,를 사용하여
# 기준 값을 늘려준다.
exam %>% arrnage(math, english)
# 정렬의 기준을 다중으로 사용하려면 ,를 사용하여
# 기준 값을 늘려준다.
exam %>% arrange(math, english)
exam %>% arrange(desc(class), math)
exam %>% arrange(-class, math)
# 특정 컬럼을 출력을 하는 함수 select()
exam %>% select(class)
exam %>% select(class, math)
# 특정 컬럼만 제거
exam %>% select(-class)
#컬럼의 범위 지정
exam %>% select(math:science)
# 새로운 컬럼을 추가하는 함수 mutate()
exam %>% mutate(total = math + english + science,
mean = (math + english + science)/3)
# group_by() summarise() 동시 사용
exam %>% group_by(class) %>%
summarise(math_mean = mean(math))
# group_by() summarise() 동시 사용
exam %>% group_by(class) %>%
summarise(math_mean = mean(math),
english_mean = mean(english))
# join() 함수를 사용
data.frame(id = 1:5, score = c(60,70,80,90,95))
# join() 함수를 사용
data.frame(id = 1:5, score = c(60,70,80,90,95)) -> df_1
df_1
df_2 <- data.frame(id = 1:5, weight=c(80,70,75,65,60))
df_3 <- data.frame(id = 1:3, class = c(1,1,2))
#inner_join
inner_join(df_1, df_2, by="id")
inner_join(df_1, df_3, by="id")
#left_join
left_join(df_1, df_2, by="id")
left_join(df_1, df_3, by="id")
#right_join
right_join(df_1, df_2, by="id")
right_join(df_1, df_3, by="id")
#full_join
full_join(df_1, df_3, by="id")
full_join(df_1, df_2, by="id")
a <- df_1
b <- df_2
bind_rows(a, b)
c <- df_3
bind_rows(a, c)
c <- data.frame(id= c(7,8,10), score=c(100, 80, 50))
bind_rows(a, c)
,NA,NA,5)
c2 <- c(1,2,3,4,5)
c3 <- c(NA,
c1 <- c(1,2,NA,NA,5)
c2 <- c(1,2,3,4,5)
c3 <- c(NA,2,3,4,5)
c1 <- c(1,2,NA,NA,5)
c2 <- c(1,2,3,4,5)
c3 <- c(NA,2,3,4,5)
df <- data.frame(c1, c2, c3)
df
is.na(df)
table(is.na(df))
table(df)
table(df$c1)
!is.na(df)
table(is.na(df$c1))
table(is.na(df$c2))
table(is.na(df$c3))
#결측치를 제거하는 방법 1
#필터링을 이용한 결측치 제거
df %>% filter(is.na(c1))
df %>% filter(!is.na(c1))
na.omit(df)
mean(df$c1)
sum(df$c1)
mean(df$c1, na.rm = T)
sum(df$c1, na.rm = T)
#결측치에 특정 한 값을 대체
exam[3, math]
#결측치에 특정 한 값을 대체
exam[[3, math]]
#결측치에 특정 한 값을 대체
exam
#결측치에 특정 한 값을 대체
exam[1,]
#결측치에 특정 한 값을 대체
exam[1,math]
#결측치에 특정 한 값을 대체
exam[,math]
#결측치에 특정 한 값을 대체
exam[1,1]
#결측치에 특정 한 값을 대체
exam
#결측치에 특정 한 값을 대체
exam[1, 3]
#결측치에 특정 한 값을 대체
exam[c(5,7), 3]
#결측치에 특정 한 값을 대체
exam[c(5,7), 3] = NA
exam
#결측치에 특정 한 값을 대체
table(is.na(exam$math))
exam$math <- ifelse(is.na(exam$math),
mean(exam$math), exam$math)
table(is.na(exam$math))
exam$math <- ifelse(is.na(exam$math),
mean(exam$math, na.rm = T), exam$math)
table(is.na(exam$math))
exam
#이상치 데이터프레임 만들기
outlier <- data.frame(gender = c(1,2,1,3,2,1),
score = c(60,70,30,40,80,90))
table(outlier$gender)
# 이상치를 제거 ifelse를 이용하여 이상치를 NA 변환
outlier$gender <- ifelse(outlier$gender == 3, NA,
outlier$gender)
table(outlier$gender)
table(is.na(outlier$gender))
# 이상치를 제외한 성별 점수 평균 구하기
outlier %>% filter(!is.na(gender)) %>%
group_by(gender) %>%
summarise(score_mean = mean(score))
library(ggplot2)
mpg
View(mpg)
mpg <- ggplot2::mpg
boxplot(mpg$hwy)
# 박스 플롯 그래프의 수치를 출력
boxplot(mpg$hwy).stats
# 박스 플롯 그래프의 수치를 출력
boxplot(mpg$hwy)$stats
table(is.na(mpg$hwy))
# 극단치를 ifelse를 이용하여 제거.
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy >37,
NA, mpg$hwy)
table(is.na(mpg$hwy))
View(mpg)
# mpg 데이터에서 hwy기준으로 결측치가 아닌 값을 필터링
# manufacturer를 기준으로 그룹화
# hwy의 평균 값을 출력
# (dplyr 패키지를 사용해서 한줄로 처리)
mpg %>% filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(hwy_mean = mean(hwy))
mpg %>% group_by(manufacturer) %>%
summarise(hwy_mean = mean(hwy))
mpg %>% group_by(manufacturer) %>%
summarise(hwy_mean = mean(hwy, na.rm=T))
