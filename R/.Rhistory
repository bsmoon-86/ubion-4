order(students$midturm, decreasing = TRUE)
order(-students$midturm)
students[order(students$midturm, decreasing = TRUE)]
students[order(students$midturm, decreasing = TRUE), ]
## 결측치인 NA 연산 관련
x <- c(7, 9, NA, 5, 2)
x[x>6]
x[x<6]
x[x==7]
subset(x, x>6)
subset(x, x<6)
# create a list of all installed packages 
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed 
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\ 
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed 
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove 
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
read.csv("csv_exam.csv")
exam <- read.csv("csv_exam.csv")
## 데이터프레임의 내장함수들 사용
head(exam)
head(exam, 3)
##tail()은 데이터프레임에서 하단에 6개를 출력
## head()함수와 사용 방법이 같습니다.
tail(exam)
tail(exam, 2)
View(exam)
view(exam)
## 데이터프레임의 사이즈를 출력 하는 함수 dim()
dim(exam)
## 데이터프레임의 속성 값 확인하는 함수 str()
str(exam)
## table()은 컬럼의 데이터들의 개수를 출력
table(exam$class)
## 통계 요약 정보를 출력하는 함수 summary()
summary(exam)
summary(exam$math)
## 패키지 설치 dplyr
install.packages("dplyr")
## 패키지는 로드(python에서의 import와 같은 기능)
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
install.packages("ggplot2")
df_raw <- data.frame(var1 = c(1,2,1),
var2 = c(2,3,5))
df_raw
#rename() 함수를 이용하여 컬럼의 이름을 변경
rename(df_raw, v2 = var2)
#파생변수를 생성.
df_raw$sum <- df_raw$var1 + df_raw.var2
#파생변수를 생성.
df_raw$sum <- df_raw$var1 + df_raw$var2
df_raw
# 조건문을 이용해서 파생변수 생성
# ifelse(조건식, 참인경우 부여가 될 값, 거짓인경우 부여될 값)
df_raw$total <- ifelse(df_raw$sum > 5, "pass", "fail")
df_raw
# 조건식이 다중인 경우
df_raw$total <- ifelse(df_raw$sum > 5, "pass",
ifelse(df_raw$sum == 5, "hold", "fail"))
df_raw
exam
# 파이프 연산자 단축키는 Shift + Ctrl + M
# filter() 함수는 필터링 기능을 가진 함수
exam %>% filter(class == 1)
# arrange()함수는 특정 컬럼의 값을 기준으로 정렬하는 함수
exam %>% arrange(math)
# 내림차순 정렬을 하려면 desc()함수를 사용
exam %>% arrange(desc(english))
# 정렬의 기준을 다중으로 사용하려면 ,를 사용하여
# 기준 값을 늘려준다.
exam %>% arrnage(math, english)
# 정렬의 기준을 다중으로 사용하려면 ,를 사용하여
# 기준 값을 늘려준다.
exam %>% arrange(math, english)
exam %>% arrange(desc(class), math)
exam %>% arrange(-class, math)
# 특정 컬럼을 출력을 하는 함수 select()
exam %>% select(class)
exam %>% select(class, math)
# 특정 컬럼만 제거
exam %>% select(-class)
#컬럼의 범위 지정
exam %>% select(math:science)
# 새로운 컬럼을 추가하는 함수 mutate()
exam %>% mutate(total = math + english + science,
mean = (math + english + science)/3)
# group_by() summarise() 동시 사용
exam %>% group_by(class) %>%
summarise(math_mean = mean(math))
# group_by() summarise() 동시 사용
exam %>% group_by(class) %>%
summarise(math_mean = mean(math),
english_mean = mean(english))
# join() 함수를 사용
data.frame(id = 1:5, score = c(60,70,80,90,95))
# join() 함수를 사용
data.frame(id = 1:5, score = c(60,70,80,90,95)) -> df_1
df_1
df_2 <- data.frame(id = 1:5, weight=c(80,70,75,65,60))
df_3 <- data.frame(id = 1:3, class = c(1,1,2))
#inner_join
inner_join(df_1, df_2, by="id")
inner_join(df_1, df_3, by="id")
#left_join
left_join(df_1, df_2, by="id")
left_join(df_1, df_3, by="id")
#right_join
right_join(df_1, df_2, by="id")
right_join(df_1, df_3, by="id")
#full_join
full_join(df_1, df_3, by="id")
full_join(df_1, df_2, by="id")
a <- df_1
b <- df_2
bind_rows(a, b)
c <- df_3
bind_rows(a, c)
c <- data.frame(id= c(7,8,10), score=c(100, 80, 50))
bind_rows(a, c)
,NA,NA,5)
c2 <- c(1,2,3,4,5)
c3 <- c(NA,
c1 <- c(1,2,NA,NA,5)
c2 <- c(1,2,3,4,5)
c3 <- c(NA,2,3,4,5)
c1 <- c(1,2,NA,NA,5)
c2 <- c(1,2,3,4,5)
c3 <- c(NA,2,3,4,5)
df <- data.frame(c1, c2, c3)
df
is.na(df)
table(is.na(df))
table(df)
table(df$c1)
!is.na(df)
table(is.na(df$c1))
table(is.na(df$c2))
table(is.na(df$c3))
#결측치를 제거하는 방법 1
#필터링을 이용한 결측치 제거
df %>% filter(is.na(c1))
df %>% filter(!is.na(c1))
na.omit(df)
mean(df$c1)
sum(df$c1)
mean(df$c1, na.rm = T)
sum(df$c1, na.rm = T)
#결측치에 특정 한 값을 대체
exam[3, math]
#결측치에 특정 한 값을 대체
exam[[3, math]]
#결측치에 특정 한 값을 대체
exam
#결측치에 특정 한 값을 대체
exam[1,]
#결측치에 특정 한 값을 대체
exam[1,math]
#결측치에 특정 한 값을 대체
exam[,math]
#결측치에 특정 한 값을 대체
exam[1,1]
#결측치에 특정 한 값을 대체
exam
#결측치에 특정 한 값을 대체
exam[1, 3]
#결측치에 특정 한 값을 대체
exam[c(5,7), 3]
#결측치에 특정 한 값을 대체
exam[c(5,7), 3] = NA
exam
#결측치에 특정 한 값을 대체
table(is.na(exam$math))
exam$math <- ifelse(is.na(exam$math),
mean(exam$math), exam$math)
table(is.na(exam$math))
exam$math <- ifelse(is.na(exam$math),
mean(exam$math, na.rm = T), exam$math)
table(is.na(exam$math))
exam
#이상치 데이터프레임 만들기
outlier <- data.frame(gender = c(1,2,1,3,2,1),
score = c(60,70,30,40,80,90))
table(outlier$gender)
# 이상치를 제거 ifelse를 이용하여 이상치를 NA 변환
outlier$gender <- ifelse(outlier$gender == 3, NA,
outlier$gender)
table(outlier$gender)
table(is.na(outlier$gender))
# 이상치를 제외한 성별 점수 평균 구하기
outlier %>% filter(!is.na(gender)) %>%
group_by(gender) %>%
summarise(score_mean = mean(score))
library(ggplot2)
mpg
View(mpg)
mpg <- ggplot2::mpg
boxplot(mpg$hwy)
# 박스 플롯 그래프의 수치를 출력
boxplot(mpg$hwy).stats
# 박스 플롯 그래프의 수치를 출력
boxplot(mpg$hwy)$stats
table(is.na(mpg$hwy))
# 극단치를 ifelse를 이용하여 제거.
mpg$hwy <- ifelse(mpg$hwy < 12 | mpg$hwy >37,
NA, mpg$hwy)
table(is.na(mpg$hwy))
View(mpg)
# mpg 데이터에서 hwy기준으로 결측치가 아닌 값을 필터링
# manufacturer를 기준으로 그룹화
# hwy의 평균 값을 출력
# (dplyr 패키지를 사용해서 한줄로 처리)
mpg %>% filter(!is.na(hwy)) %>%
group_by(manufacturer) %>%
summarise(hwy_mean = mean(hwy))
mpg %>% group_by(manufacturer) %>%
summarise(hwy_mean = mean(hwy))
mpg %>% group_by(manufacturer) %>%
summarise(hwy_mean = mean(hwy, na.rm=T))
## 오름차순, 내림차순 정렬 방법 order() 함수를 사용
## 오름차순 정렬
order(students$grade) ## 인덱스의 값.  백터형
students[order(students$grade),]
## 내림차순 정렬
order(students$midturm, decreasing = TRUE)
order(-students$midturm)
## 결측치인 NA 연산 관련
x <- c(7, 9, NA, 5, 2)
x[x>6]
x[x<6]
x[x==7]
subset(x, x>6)
subset(x, x<6)
library(dplyr)
c1 <- c(1,2,NA,NA,5)
c2 <- c(1,2,3,4,5)
c3 <- c(NA,2,3,4,5)
df <- data.frame(c1, c2, c3)
#is.na()는 결측치는 True 결측치가 아니면 False를 출력
is.na(df)
#is.na()와 table()를 같이 사용하면 결측치의 개수를 확인
table(is.na(df))
table(is.na(df$c1))
table(is.na(df$c2))
table(is.na(df$c3))
#결측치를 제거하는 방법 1
#필터링을 이용한 결측치 제거
df %>% filter(is.na(c1))
df %>% filter(!is.na(c1))
#na.omit() 행에 결측치가 하나라도 존재하면 그 행을 삭제
na.omit(df)
#이상치 데이터프레임 만들기
outlier <- data.frame(gender = c(1,2,1,3,2,1),
score = c(60,70,30,40,80,90))
# 이상치를 체크
table(outlier$gender)
mpg <- ggplot2::mpg
#극단치 확인 박스 플롯 그래프
boxplot(mpg$hwy)
# 박스 플롯 그래프의 수치를 출력(극단치의 경계를 체크)
boxplot(mpg$hwy)$stats
library(ggplot2)
## 산점도 그래프
ggplot(data = mpg, aes(x = displ, y = hwy))
#그래프 레이어 추가
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point()
# 그래프에서 x축의 범위 지정
ggplot(data=mpg, aes(x=displm y=hwy)) + geom_point() + xlim(3,6)
# 그래프에서 x축의 범위 지정
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point() + xlim(3,6)
# 그래프에서 y축의 범위 지정
ggplot(data=mpg, aes(x=displ, y=hwy)) + geom_point() + xlim(3,6) + ylim(10, 20)
# 막대그래프
mpg <- ggplot2::mpg
mpg2 <- mpg %>% group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
mpg2
# geom_col()함수를 이용한 막대 그래프
# x축과 y축의 데이터가 필요
ggplot(data=mpg2, aes(x = drv, y = mean_hwy)) + geom_col()
library(dplyr)
# 데이터의 크기에 따라 막대의 순서를 변경
ggplot(data=mpg2, aes(x = reorder(drv, mean_hwy),
y = mean_hwy)) +
geom_col()
# 데이터의 크기에 따라 막대의 순서를 변경
ggplot(data=mpg2, aes(x = reorder(drv, mean_hwy),
y = mean_hwy)) + geom_col()
ggplot(data=mpg2, aes(x = reorder(drv, -mean_hwy),
y = mean_hwy)) + geom_col()
# geom_bar()를 이용하여 막대 그래프 출력
table(mpg$drv)
ggplot(data=mpg, aes(x = drv)) + geom_bar()
View(economics)
## 라인 그래프
## geom_line()를 사용하여 라인 그래프를 출력
ggplot(data = economics, aes(x = date, y = unemploy)) +
geom_line()
# 박스 플롯
# geom_boxplot()
ggplot(data=mpg, aes(x = drv, y = hwy)) + geom_boxplot()
library(dplyr)
library(ggplot2)
mpg <- ggplot2::mpg
#case2(dplyr)
mpg %>% mutate(total = (cty+hwy)/2)
#case2(dplyr)
mpg %>% mutate(total = (cty+hwy)/2) %>% head(2)
#case2(dplyr)
View(mpg %>% mutate(total = (cty+hwy)/2))
#case2(dplyr)
mpg %>% mutate(total = (cty+hwy)/2) %>%
select(cty, hwy, total) %>% head()
#case1(base)
mpg$total <- (mpg$cty + mpg$hwy)/2
mpg[,(cty, hwy, total)]
mpg[,[cty, hwy, total]]
mpg[[cty, hwy, total]]
mpg[["cty", "hwy", "total"]]
View(mpg)
mpg[[c("cty", "hwy", "total")]]
#case1(dplyr)
mpg %>% mutate(test = ifelse(total >=30, "A",
ifelse(total >= 20, "B", "C"))) %>%
select("total", "test") %>% head(5)
#case2(base)
mpg$test <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >=20, "B", "C"))
head(mpg[c("total", "test")], 5)
table(mpg$test)
qplot(mpg$test)
midwest
#str() 함수를 이용하여 데이터프레임의 구조 확인
str(midwest)
View(midwest)
midwest <- as.data.frame(ggplot2::midwest)
str(midwest)
midwest <- rename(midwest, total = poptotal)
midwest <- rename(midwest, asian = popasian)
midwest %>% mutate(ratio = (asian/total)*100) %>% select(ratio) %>% head(3)
#파생변수 ratio 생성
midwest <- midwest %>% mutate(ratio = (asian/total)*100)
mean(midwest$ratio)
#파생변수 group 생성 base 함수를 이용하여 생성
midwest$group <- ifelse(
midwest$ratio > mean(midwest%ratio), "large", "small")
#파생변수 group 생성 base 함수를 이용하여 생성
midwest$group <- ifelse(
midwest$ratio > mean(midwest$ratio), "large", "small")
head(midwest[c("ratio", "group")], 3)
table(midwest$group)
qplot(midwest$group)
exam <- read.csv("csv_exam.csv")
## summarise()에서 사용하는 함수
## mean() : 평균
## sum() : 합계
## min() : 최소값
## max() : 최대값
## median() : 중앙값
## sd() : 표준편차
## n() : 빈도(개수)
exam %>% group_by(class) %>% summarise(
mean = mean(math),
sum = sum(math),
min = min(math),
max = max(math),
median = median(),
sd = sd(math),
n = n()
)
## summarise()에서 사용하는 함수
## mean() : 평균
## sum() : 합계
## min() : 최소값
## max() : 최대값
## median() : 중앙값
## sd() : 표준편차
## n() : 빈도(개수)
exam %>% group_by(class) %>% summarise(
mean = mean(math),
sum = sum(math),
min = min(math),
max = max(math),
median = median(math),
sd = sd(math),
n = n()
)
## mpg에서 manufacturer(제조사)별로 그룹화
## class 값이 suv인 자동차들의
## total 컬럼의 평균을 컬럼의 이름을 mean_total이라 지정
## 상위 5위까지 출력
head(mpg$total, 2)
mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total = mean(total))
mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total = mean(total)) %>%
arrange(desc(mean_total))
mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total = mean(total)) %>%
arrange(desc(mean_total)) %>%
head(5)
mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total = mean(total)) %>%
order(desc(mean_total)) %>%
head(5)
mpg2 <- mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total = mean(total))
mpg2
mpg2
mpg2 <- order(mpg2$mean_total)
mpg2
mpg2 <- mpg %>% group_by(manufacturer) %>%
filter(class == "suv") %>%
summarise(mean_total = mean(total))
order(mpg2$mean_total)
mpg2[order(mpg2$mean_total),]
mpg2[order(mpg2$mean_total, decreasing = TRUE),]
head(mpg2[order(mpg2$mean_total, decreasing = TRUE),]),5
head(mpg2[order(mpg2$mean_total, decreasing = TRUE),],5)
## mpg 데이터프레임은 연료 종류(fl)컬럼이 존재
## 연료 가격을 나타내는 컬럼은 존재하지 않는다.
## 연료 종류, 연료 가격이 있는 데이터프레임 만들고
## mpg 데이터프레임에 join
feul <- data.frame(fl = c("c", "d", "e", "p", "r"),
price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22))
## mpg 데이터프레임은 연료 종류(fl)컬럼이 존재
## 연료 가격을 나타내는 컬럼은 존재하지 않는다.
## 연료 종류, 연료 가격이 있는 데이터프레임 만들고
## mpg 데이터프레임에 join
fuel <- data.frame(fl = c("c", "d", "e", "p", "r"),
price_fl = c(2.35, 2.38, 2.11, 2.76, 2.22))
fuel
table(mpg$fl)
left_join(mpg, fuel, by="fl")
add_mpg <- left_join(mpg, fuel, by="fl")
add_mpg %>% select("fl", "price_fl") %>% head(5)
midwest <- as.data.frame(gglot2::midwest)
midwest <- as.data.frame(ggplot2::midwest)
midwest %>% mutate(ratio_child = (poptotal - popadults)/poptotal * 100)
midwest %>% mutate(ratio_child = (poptotal - popadults)/poptotal * 100) %>%
mutate(grade = ifelse(ratio_child >= 40, "large",
ifelse(ratio_child>=30, "middle", "small"))) %>%
select("ratio_child", "grade") %>% head(5)
midwest2 <- midwest %>% mutate(ratio_child = (poptotal - popadults)/poptotal * 100) %>%
mutate(grade = ifelse(ratio_child >= 40, "large",
ifelse(ratio_child>=30, "middle", "small")))
table(midwest2$grade)
qplot(midwest2$grade)
## mpg 데이터 초기화
mpg <- ggplot2::mpg
## mpg 데이터 초기화
mpg <- as.data.frame(ggplot2::mpg)
## 결측치 대입
mpg[c(65,124,131,153,212),"hwy"] <- NA
table(is.na(mpg$hwy))
table(is.na(mpg$drv))
table(is.na(mpg))
dim(mpg)
str(mpg)
mpg %>% filter(is.na(hwy))
mpg %>% filter(!is.na(hwy))
mpg %>% filter(!is.na(hwy)) %>% head(5)
mpg %>% filter(!is.na(hwy)) %>%
group_by(drv) %>% summarise(mean_hwy = mean(hwy))
mpg %>% filter(!is.na(hwy)) %>%
group_by(drv) %>% summarise(mean_hwy = mean(hwy)) %>%
arrange(desc(mean_hwy))
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), "drv"] <- "k"
mpg[c(29, 43, 129, 203), "cty"] <- c(3,4,39,42)
table(mpg$drv)
# 4, f, r이 아닌경우 NA
mpg$drv <- ifelse(mpg$drv %in% c("4", "f", "r"), mpg$drv, NA)
# 극단치 범위 체크
boxplot(mpg$cty)
boxplot(mpg$cty)$stats
# 극단치 제거
mpg$drv <- ifelse(mpg$cty < 9 | mpg$cty > 26,
NA, mpg$cty)
table(mpg$drv)
table(is.na(mpg$drv))
mpg <- as.data.frame(ggplot2::mpg)
mpg[c(10, 14, 58, 93), "drv"] <- "k"
mpg[c(29, 43, 129, 203), "cty"] <- c(3,4,39,42)
table(mpg$drv)
# 4, f, r이 아닌경우 NA
mpg$drv <- ifelse(mpg$drv %in% c("4", "f", "r"),
mpg$drv, NA)
# 극단치 범위 체크
boxplot(mpg$cty)
table(is.na(mpg$drv))
# 극단치 제거
mpg$cty <- ifelse(mpg$cty < 9 | mpg$cty > 26,
NA, mpg$cty)
table(is.na(mpg$cty))
mpg %>% filter(!is.na(drv) & !is.na(cty)) %>%
group_by(drv) %>%
summarise(cty_mean = mean(cty))
